# --- Imports ---
import os
import subprocess
import json

import pandas as pd
import numpy as np

# --- Lambda Functions ---
get_step_n = lambda x: x.split("step")[-1] if isinstance(x, str) else x


# --- Functions ---
def get_available_steps(root_dir: str):
    """
    Get the available steps from the specified root directory.

    This function retrieves the available steps by listing the directories in the 'input' directory
    located in the specified root directory. The steps are sorted in ascending order.

    Parameters:
        root_dir (str): The root directory.

    Returns:
        list: A sorted list of available steps.

    Example:
        get_available_steps("/path/to/root/dir")
    """
    # Define the directory containing the JSON templates
    input_dir = os.path.join(root_dir, "input")

    # List available steps
    steps = [
        d for d in os.listdir(input_dir) if os.path.isdir(os.path.join(input_dir, d))
    ]

    return sorted(steps)


def retrieve_terminal_output() -> str:
    """
    Retrieve the terminal output from running a bash command.

    This function executes a bash command using the 'subprocess' module and captures the stdout and stderr outputs. It then processes the outputs to remove any leading or trailing newlines and returns them as a tuple.

    Returns:
        str: The stdout output of the bash command.
        str: The stderr output of the bash command.

    Notes:
        - Subprocess relies on paralelism which can be extremely buggy when using the `transformers` module.

    Example:
        stdout, stderr = retrieve_terminal_output()
    """
    result = subprocess.Popen(
        ["bash", "run.sh"], stdout=subprocess.PIPE, stderr=subprocess.PIPE
    )
    std_outputs = stdout, stderr = result.communicate()

    stdout_str, stderr_str = [
        "\n".join(std_output.decode().split("\n")[1:][:-1])
        for std_output in std_outputs
    ]

    return (stdout_str, stderr_str)


def load_json_file(filepath: str) -> dict:
    """
    Load and parse a JSON file from the specified filepath.

    Parameters:
        filepath (str): The path to the JSON file to be loaded.

    Returns:
        dict: The parsed JSON data as a dictionary.

    Example:
        load_json_file("/path/to/file.json")
    """
    with open(filepath, "r") as file:
        return json.load(file)


def create_prompt(template_data: str, source_data: str) -> str:
    """
    Create a prompt by replacing the placeholder '%%source' in the template data with the provided source data.

    Parameters:
        template_data (str): The template data containing the placeholder '%%source'.
        source_data (str): The source data to replace the placeholder.

    Returns:
        str: The prompt generated by replacing the placeholder with the source data.

    Example:
        create_prompt("Hello %%source, how are you?", "Alice")
    """
    return template_data.replace("%%source", source_data)


def read_generated_response(output_filepath: str) -> str:
    """
    Read and return the 'data' field from a JSON file located at the specified filepath.

    Parameters:
        output_filepath (str): The path to the JSON file containing the data.

    Returns:
        str: The value of the 'data' field from the JSON file as a string.

    Example:
        read_generated_response("/path/to/output.json")
    """
    return load_json_file(output_filepath)["data"]


def read_meta(output_filepath: str) -> str:
    """
    Read and return the '__meta__' field from a JSON file located at the specified filepath.

    Parameters:
        output_filepath (str): The path to the JSON file containing the data.

    Returns:
        str: The value of the '__meta__' field from the JSON file as a string.

    Example:
        read_meta("/path/to/output.json")
    """
    return load_json_file(output_filepath)["__meta__"]


def gather_all_metrics(
    root_dir: str,
    models: list[str],
    steps: list[str],
):
    df_list = []

    # Iterate through each model and step
    for model in models:
        for step in steps:
            metrics_dir = os.path.join(root_dir, "results", model, step, "metrics")
            metrics_path = os.path.join(metrics_dir, f"metrics_{step}.csv")

            if metrics_path and os.path.exists(metrics_path):
                df_list.append(pd.read_csv(metrics_path, index_col=None))
            else:
                df_list.append(pd.DataFrame([{}]))

    all_metrics_long_df = pd.concat(df_list)

    return all_metrics_long_df


# --- Constants ---

REPO_ROOT_DIR = os.path.join(os.getcwd())
PROMPT_ROOT_DIR = os.path.join(os.getcwd(), "prompt_creation", "prompting")
DOCS_ROOT_DIR = os.path.join(os.getcwd(), "docs")
AVAILABLE_STEPS = get_available_steps(PROMPT_ROOT_DIR)
AVAILABLE_STEPS_N = list(map(get_step_n, get_available_steps(PROMPT_ROOT_DIR)))
LLMs = ["ChatGPT", "Meta-Llama3-8B", "Mixtral-8x7B"]
